---
import { format } from "date-fns";
import { ExternalLink, Calendar } from "lucide-preact";

import { cn } from "~/utils/cn";
import { loadIcon } from "~/utils/icon";

import type { CollectionEntry } from "astro:content";

type Project = CollectionEntry<"projects">["data"];

export interface Props {
  class?: string;
  projects: Array<Project>;
  title?: string;
}

const { class: className, projects, title } = Astro.props;

const statusConfig = {
  development: { label: 'In Development', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400' },
  maintenance: { label: 'Maintenance', color: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' },
  idea: { label: 'Idea', color: 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400' },
  archived: { label: 'Archived', color: 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400' },
  production: { label: 'Production', color: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' }
} as const;
---

<div class={cn("w-full", className)}>
  {title && (
    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-8">
      {title}
    </h2>
  )}

  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    {projects.map(async (project) => {
      const Icon = await loadIcon(project.icon);
      const hasUrl = !!project.url;
      const Component = hasUrl ? "a" : "div";
      const status = project.status || 'development';
      const statusInfo = statusConfig[status];

      return (
        <Component
          href={project.url}
          target={hasUrl ? "_blank" : undefined}
          rel={hasUrl ? "noopener noreferrer" : undefined}
          class={cn(
            "group relative bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 rounded-xl p-6 transition-all duration-300",
            hasUrl && "hover:border-primary-300 dark:hover:border-primary-600 hover:shadow-lg hover:shadow-primary-500/5 cursor-pointer",
            !hasUrl && "cursor-default"
          )}
        >
          {/* Status Badge */}
          <div class="absolute top-4 right-4">
            <span class={cn(
              "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium",
              statusInfo.color
            )}>
              {statusInfo.label}
            </span>
          </div>

          {/* Project Icon */}
          <div class="flex items-center justify-center w-12 h-12 bg-primary-50 dark:bg-primary-900/20 rounded-lg mb-4 group-hover:scale-110 transition-transform duration-300">
            <Icon class="w-6 h-6 text-primary-600 dark:text-primary-400" />
          </div>

          {/* Project Title */}
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors">
            {project.title}
            {hasUrl && (
              <ExternalLink class="inline-block w-4 h-4 ml-1 opacity-0 group-hover:opacity-100 transition-opacity" />
            )}
          </h3>

          {/* Project Description */}
          {project.description && (
            <p class="text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-3 leading-relaxed">
              {project.description}
            </p>
          )}

          {/* Project Date */}
          <div class="flex items-center text-xs text-gray-500 dark:text-gray-500 mt-auto">
            <Calendar class="w-3 h-3 mr-1" />
            {format(new Date(project.date), "MMM yyyy")}
          </div>

          {/* Hover Effect Overlay */}
          {hasUrl && (
            <div class="absolute inset-0 bg-gradient-to-r from-primary-500/5 to-primary-600/5 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
          )}
        </Component>
      );
    })}
  </div>

  {/* Empty State */}
  {projects.length === 0 && (
    <div class="text-center py-12">
      <div class="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-200 mb-2">
        No projects yet
      </h3>
      <p class="text-gray-600 dark:text-gray-400 text-sm max-w-sm mx-auto">
        Check back soon for updates on my latest projects and experiments.
      </p>
    </div>
  )}
</div>